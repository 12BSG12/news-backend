# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

"""recipe """
type PageMetaDto {
  page: Int!
  take: Int!
  itemCount: Int!
  pageCount: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

"""recipe """
type PostEntity {
  id: ID!
  title: String!
  body: String!
  views: Int!
  tags: String
  createAt: DateTime!
  updateAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""recipe """
type CommentEntity {
  id: ID!
  text: String!
  createAt: DateTime!
  updateAt: DateTime!
}

"""recipe """
type UserEntity {
  id: ID!
  fullName: String!
  email: String!
  password: String
  createAt: DateTime!
  updateAt: DateTime!
}

type RegAndLoginResponse {
  id: Int!
  email: String!
  token: String!
}

type Query {
  getAllUsers(order: String = "ASC", page: Int = 1, take: Int = 10): [UserEntity!]!
  getPageInfo(order: String = "ASC", page: Int = 1, take: Int = 10): PageMetaDto!
  getUserById(id: Int!): UserEntity!
  getSearchUsers(order: String = "ASC", page: Int = 1, take: Int = 10, fullName: String, email: String): [UserEntity!]!
  getMyProfile: UserEntity!
  getAllPosts(order: String = "ASC", page: Int = 1, take: Int = 10): [PostEntity!]!
  getPopularPost(order: String = "ASC", page: Int = 1, take: Int = 10): [PostEntity!]!
  getPostById(id: ID!): PostEntity!
  getSearchPost(order: String = "ASC", page: Int = 1, take: Int = 10, title: String, body: String, tag: String): [PostEntity!]!
  getAllComments(postId: ID): [CommentEntity!]!
  findOne(id: ID!): CommentEntity!
}

type Mutation {
  removeUser(id: Int!): Int!
  updateUser(fullName: String!, email: String!, password: String): UserEntity!
  createPost(title: String!, body: String!, views: Int, tags: String): PostEntity!
  updatePost(id: ID!, text: String!, postId: ID!): CommentEntity!
  removePost(id: ID!): ID!
  createComment(text: String!, postId: ID!): CommentEntity!
  removeComment(id: ID!): ID!
  login(email: String!, password: String!): RegAndLoginResponse!
  register(fullName: String!, email: String!, password: String): RegAndLoginResponse!
}